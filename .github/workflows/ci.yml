name: Python CI

on:
  push:
    branches: [ master, ci-test* ]
    paths-ignore:
      - 'tests/Auto-GPT-test-cassettes'
      - 'tests/integration/challenges/current_score.json'
  pull_request:
    branches: [ stable, master, ci-test* ]
  pull_request_target:
    branches: [ master, ci-test* ]

concurrency:
  group: ${{ format('ci-{0}', github.head_ref && format('pr-{0}', github.event.pull_request.number) || github.sha) }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull_request') && github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target') }}

jobs:
  lint:
    # eliminate duplicate runs on master
    if: github.event_name == 'push' || github.ref_name != 'master' || (github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target'))

    runs-on: ubuntu-latest
    env:
      min-python-version: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python ${{ env.min-python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.min-python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: flake8

      - name: Check black formatting
        run: black . --check
        if: success() || failure()

      - name: Check isort formatting
        run: isort . --check
        if: success() || failure()

      - name: Check mypy formatting
        run: mypy
        if: success() || failure()

      - name: Check for unused imports and pass statements
        run: |
          cmd="autoflake --remove-all-unused-imports --recursive --ignore-init-module-imports autogpt tests"
          $cmd --check || (echo "You have unused imports or pass statements, please run '${cmd} --in-place'" && exit 1)

  test:
    # eliminate duplicate runs on master
    if: github.event_name == 'push' || github.ref_name != 'master' || (github.event.pull_request.head.repo.fork == (github.event_name == 'pull_request_target'))

    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: true

      - id: setup_git_auth
        name: Set up git token authentication
        run: |

      - name: Push updated challenge scores
        if: github.event_name == 'push'
        run: |
          score_file="tests/integration/challenges/current_score.json"

          if ! git diff --quiet $score_file; then
            git add $score_file
            git commit -m "Update challenge scores"
            git push origin HEAD:${{ github.ref }}
          else
            echo "The challenge scores didn't change."
          fi

      - id: push_cassettes
        name: Push updated cassettes
        run: |
          if [[ "${{ startsWith(github.event_name, 'pull_request') }}" = "true" ]]; then
            is_pull_request=true
            cassette_branch="${{ github.event.pull_request.user.login }}-${{ github.event.pull_request.head.ref }}"
            cassette_source_branch="${{ steps.checkout_cassettes.outputs.cassette_branch }}"
            base_branch="${{ github.event.pull_request.base.ref }}"
          else
            current_branch=$(echo ${{ github.ref }} | sed -e "s/refs\/heads\///g")
            cassette_branch=$current_branch
          fi

          git fetch origin $cassette_source_branch
          
          echo ${{ secrets.PAT_REVIEW }} | gh auth login --with-token
          git config --global user.name "Auto-GPT-Bot"
          git config --global user.email "github-bot@agpt.co"
          cd tests/Auto-GPT-test-cassettes
          echo "test" >> test.txt 
          git add .
          git commit -m "ok"
          git push -f origin HEAD:$cassette_branch

          # Commit & push changes to cassettes if any
          if ! git diff-index --quiet $cassette_source_branch; then
            if ! [ "$cassette_branch" = "$cassette_source_branch" ]; then
              git checkout -b $cassette_branch
            fi
            git add .
            git commit -m "Auto-update cassettes"
            if [ $is_pull_request ]; then
              git push -f origin HEAD:$cassette_branch
            else
              git pull --rebase origin $cassette_source_branch
              git push origin HEAD:$cassette_branch
            fi

            cd ../..
            if [ $is_pull_request ]; then
              git fetch origin $base_branch
              cassette_diff=$(git diff $cassette_branch origin/$base_branch)
            else
              git add tests/Auto-GPT-test-cassettes
              git commit -m "Update cassette submodule"
              git push origin HEAD:$current_branch
            fi
          else
            echo "No cassette changes to commit"
          fi

          if [ -n "$cassette_diff" ]; then
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Post Set up git token auth
        run: |
          git config --unset "${{ steps.setup_git_auth.outputs.config_key }}"
